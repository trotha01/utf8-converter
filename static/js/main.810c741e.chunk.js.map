{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["encoding","require","fileLoaded","reader","setState","event","content","result","encodingType","detect","console","log","description","before","after","convert","loading","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","_this$state","beforeView","react_default","a","createElement","afterView","loader","className","downloadable","length","type","ref","onChange","e","file","target","files","newState","FileReader","onloadend","readAsText","fileChanged","onClick","refs","downloadLink","click","style","height","width","download","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAGMA,SAAWC,EAAS,KAa1B,IAAMC,EAAa,SAACC,EAAQC,GAAT,OAAsB,SAAAC,GACvC,IAAMC,EAAUH,EAAOI,OACjBC,EAAeR,EAASS,OAAOH,GACrCI,QAAQC,IAAIH,GAiBZJ,EAfqB,SAAjBI,EAOiB,YAAjBA,GAA+C,UAAjBA,EAQzB,CACPI,YAAa,YACbC,OAAQP,EAERQ,MAAOd,EAASe,QAAQT,EAAS,SACjCU,SAAS,GAZA,CACPJ,YAAa,2CACbI,SAAS,GATF,CACPJ,YAAa,4BACbI,SAAS,MA6GAC,cAvFZ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXd,YAAa,GACbI,SAAS,EACTH,OAAQ,GACRC,MAAO,IANQK,wEAUX,IAAAQ,EAAAL,KAAAM,EACyCN,KAAKI,MAA7Cd,EADDgB,EACChB,YAAaC,EADde,EACcf,OAAQC,EADtBc,EACsBd,MAAOE,EAD7BY,EAC6BZ,QAmB9Ba,EACJC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAInB,IAIFoB,EACJH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAIlB,IAIFoB,EAASJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACxBC,EAAetB,EAAMuB,OAAS,EAEpC,OACEP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAEhBL,EAAAC,EAAAC,cAAA,iCAEAF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OACVC,IAAI,YACJC,SAzCc,SAACC,GACrB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBxC,EAAW,SAACyC,GAAD,OAAclB,EAAKvB,SAASyC,IAE7ClB,EAAKvB,SAAS,CAACY,SAAS,EAAMJ,YAAa,IAAK,kBA3DtD,SAAqB8B,EAAMtC,GACzB,GAAKsC,EAAL,CAKA,IAAMvC,EAAS,IAAI2C,WACnB3C,EAAO4C,UAAY7C,EAAWC,EAAQC,GACtCD,EAAO6C,WAAWN,QANhBhC,QAAQC,IAAI,oBAyD4CsC,CAAYP,EAAMtC,QAwCpE0B,EAAAC,EAAAC,cAAA,SAAIpB,GAEFwB,EAAeN,EAAAC,EAAAC,cAAA,UAAQkB,QAvCd,SAACT,GAChBd,EAAKwB,KAAKC,aAAaC,UAsCF,gCAAmE,KAEnFrC,EAAUkB,EACTJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACXtB,EAAOwB,OAAS,EAAKR,EAAa,MAGtCC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACZnB,EAAUkB,EAAS,KAClBpB,EAAMuB,OAAS,EAAKJ,EAAY,OAKxCH,EAAAC,EAAAC,cAAA,KAAGO,IAAI,eACLe,MAnDU,CAChBC,OAAQ,MACRC,MAAO,OAkDDC,SAAS,oBACTC,KAAM,gCAAkC5C,aA/ElC6C,aCjCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.810c741e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// const utf8 = require('utf8');\nconst encoding = require ('encoding-japanese');\n\nfunction fileChanged(file, setState) {\n  if (!file) {\n    console.log('no file selected')\n    return\n  }\n\n  const reader = new FileReader();\n  reader.onloadend = fileLoaded(reader, setState)\n  reader.readAsText(file)\n}\n\nconst fileLoaded = (reader, setState) => event => {\n  const content = reader.result\n  const encodingType = encoding.detect(content)\n  console.log(encodingType)\n\n  if (encodingType === 'UTF8') {\n    setState({\n      description: \"This file is already utf8\",\n      loading: false\n    })\n    return\n  }\n  if (encodingType === 'UNICODE' || encodingType === 'UTF16') {\n    setState({\n      description: \"This file is utf16, no conversion needed\",\n      loading: false\n    })\n    return\n  }\n\n  setState({\n    description: \"Converted\",\n    before: content,\n    // after: utf8.encode(content),\n    after: encoding.convert(content, 'UTF16'),\n    loading: false\n  })\n}\n\nclass App extends Component {\n   constructor(props) {\n     super(props)\n     this.state = {\n       description: \"\",\n       loading: false,\n       before: \"\",\n       after: \"\",\n     }\n   }\n\n  render() {\n    const { description, before, after, loading } = this.state\n\n\n    const onFileChanged = (e) => {\n      const file = e.target.files[0]\n      const setState = (newState) => this.setState(newState)\n      // console.log(downloadLink)\n      this.setState({loading: true, description: \"\"}, () => fileChanged(file, setState))\n    }\n\n    const download = (e) => {\n      this.refs.downloadLink.click()\n    }\n\n    const linkStyle = {\n      height: '0px',\n      width: '0px'\n    }\n\n    const beforeView = (\n      <div>\n        <h1>Before</h1>\n        <p>{before}</p>\n      </div>\n    )\n\n    const afterView = (\n      <div>\n        <h1>After</h1>\n        <p>{after}</p>\n      </div>\n    )\n\n    const loader = <div className=\"loader\"></div>\n    const downloadable = after.length > 0\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <p>Convert File to UTF8</p>\n\n          <input type=\"file\"\n            ref=\"fileInput\"\n            onChange={onFileChanged}>\n          </input>\n\n          <p>{description}</p>\n          \n          { downloadable ? <button onClick={download}>Download UTF8 Converted File</button> : null }\n\n          {loading ? loader :\n            <div className='row'>\n              <div className='column'>\n                {(before.length > 0) ? beforeView : null}\n              </div>\n\n              <div className='column'>\n                {loading ? loader : null}\n                {(after.length > 0) ? afterView : null}\n              </div>\n            </div>\n          }\n  \n          <a ref='downloadLink' \n            style={linkStyle}\n            download='utf8converted.csv'\n            href={'data:text/csv; charset=utf-8,' + after}>\n          </a>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}